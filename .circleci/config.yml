# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  style_check:
    working_directory: /tmp/src/style_check
    docker:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      - image: continuumio/miniconda3
    steps:
      - checkout
      - run:
          name: Generate environment
          command: |
            conda create -n venv python>3.6 pylint -yq
            source activate venv
            pip install flake8
      - run:
          name: Style check
          command: |
            source activate venv
            flake8 --max-line-length=79 --exclude=versioneer.py  --ignore=W503 /tmp/src/funcworks

  build:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tmp/src/funcworks
    steps:
      - run:
          name: Install parallel gzip and Python 3
          command: |
            apk add --no-cache pigz python3>3.6.0
      - run:
          name: Cleaning working Directory
          command: |
            rm -rf /tmp/src/funcworks/*
      - checkout
      - setup_remote_docker
      - run:
          name: Fetch latest release image
          no_output_timeout: 10m
          command: |
            docker pull adamkimbler/funcworks:latest
      - run:
          name: Build image
          no_output_timeout: 30m
          command: |
            THISVERSION=$( python3 -c 'import funcworks; print(funcworks.__version__)' )
            echo "Building version ${CIRCLE_TAG:-$THISVERSION}"
            docker build \
              --cache-from=adamkimbler/funcworks \
              --rm=false \
              --tag adamkimbler/funcworks:latest \
              --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
              --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" .
      - run:
          name: Verify executable can be run
          command: docker run --rm adamkimbler/funcworks:latest --help
      - run:
          name: Check version
          command: |
            THISVERSION=$( python3 -c 'import funcworks; print(funcworks.__version__)' )
            THISVERSION="${CIRCLE_TAG:-$THISVERSION}"
            DOCKERVERSION=$(docker run --rm adamkimbler/funcworks:latest --version \
                           | tail -n 1 | sed -e 's/.*[\r\n]//g' -e 's/.dirty//g')
            echo "$THISVERSION"
            echo "$DOCKERVERSION"
            test "$DOCKERVERSION" = "$THISVERSION"
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save adamkimbler/funcworks:latest \
            | pigz -2 -p 3 > /tmp/cache/docker.tar.gz
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/funcworks
      - save_cache:
          key: docker-v0-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
          paths:
            - /tmp/cache/docker.tar.gz

  cache_test_data:
    docker:
      - image: markiewicz/datalad:0.0.1
    working_directory: /tmp/data
    steps:
      - checkout:
          path: /tmp/src
      - restore_cache:
          keys:
            - ds003-v0-{{ .Branch }}-
            - ds003-v0-master-
            - ds003-v0-
      - run:
          name: Set git ID
          command: |
            git config --global user.name 'Adam Kimbler'
            git config --global user.email 'akimbler@fiu.edu'
      - run:
          name: Install fMRIPrep derivatives of ds000003
          command: |
            datalad install -r ///labs/poldrack/ds003_fmriprep
            datalad update ds003_fmriprep/
            datalad get ds003_fmriprep/sub-0{1,2}/func/*_space-*_desc-*.nii.gz \
                        ds003_fmriprep/sub-0{1,2}/func/*_desc-confounds_*.tsv \
                        ds003_fmriprep/dataset_description.json \
                        ds003_fmriprep/sub-0{1,2}/*/*.json
      - run:
          name: Download a model for ds000003
          command: |
              mkdir -p ds003_models
              cp /tmp/src/examples/models/ds000003/models/model-001_smdl.json ds003_models/
      - save_cache:
         key: ds003-v0-{{ .Branch }}-{{ .BuildNum }}
         paths:
            - /tmp/data

  test_ds003:
      machine:
          image: circleci/classic:201711-01
      working_directory: /tmp/src/funcworks
      steps:
        - attach_workspace:
            at: /tmp
        - restore_cache:
            keys:
              - docker-v0-{{ .Branch }}-{{ .Revision }}
        - restore_cache:
            keys:
              - ds003-v0-{{ .Branch }}-
              - ds003-v0-master-
              - ds003-v0-
        - run:
            name: Install coverage and codecov
            command: |
                pyenv install 3.6.3
                pyenv local 3.6.3
                python -m pip install -U "coverage<5" codecov
        - run:
            name: Load Docker image layer cache
            no_output_timeout: 30m
            command: |
              docker info
              set +o pipefail
              if [ -f /tmp/cache/docker.tar.gz ]; then
                sudo apt update && sudo apt -y install pigz
                pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
                docker images
              fi
        - run:
            name: Run Module Tests
            no_output_timeout: 2h
            command: |
              mkdir -p /tmp/ds003/work_modules
              chmod 777 /tmp/ds003/work_modules
              export CONDA_PREFIX=/opt/miniconda-latest/envs/neuro
              docker run --rm -v /tmp/ds003/work_modules:/scratch \
                  -e COVERAGE_FILE=/scratch/.coverage \
                  --entrypoint="/neurodocker/startup.sh" \
                  adamkimbler/funcworks:latest \
                  pytest --cov=$CONDA_PREFIX/lib/python3.6/site-packages/funcworks/ \
                  --cov-config=/src/funcworks/docker/multiproc.coveragerc \
                  $CONDA_PREFIX/lib/python3.6/site-packages/funcworks/tests/
        - run:
            name: Run Funcworks
            no_output_timeout: 2h
            command: |
              mkdir -p /tmp/ds003/work /tmp/ds003/derivatives
              chmod 777 /tmp/ds003/work /tmp/ds003/derivatives
              export CONDA_PREFIX=/opt/miniconda-latest/envs/neuro
              docker run --rm -v /tmp/data/ds003_fmriprep:/data: \
                  -v /tmp/ds003/derivatives:/out \
                  -v /tmp/ds003/work:/scratch \
                  -v /tmp/data/ds003_models:/models \
                  -e COVERAGE_FILE=/scratch/.coverage \
                  --entrypoint="/neurodocker/startup.sh" \
                  adamkimbler/funcworks:latest \
                  coverage run \
                  --rcfile /src/funcworks/docker/multiproc.coveragerc \
                  $CONDA_PREFIX/bin/funcworks /data/sourcedata /out dataset \
                  -d /data -m /models/model-001_smdl.json -w /scratch \
                  --participant-label 01 02
        - run:
            name: Run Funcworks - Super Deluxe
            no_output_timeout: 2h
            command: |
              mkdir -p /tmp/ds003/work_sdlx /tmp/ds003/derivatives
              chmod 777 /tmp/ds003/work_sdlx /tmp/ds003/derivatives
              export CONDA_PREFIX=/opt/miniconda-latest/envs/neuro
              docker run --rm -v /tmp/data/ds003_fmriprep:/data: \
                  -v /tmp/ds003/derivatives:/out \
                  -v /tmp/ds003/work_sdlx:/scratch \
                  -v /tmp/data/ds003_models:/models \
                  -e COVERAGE_FILE=/scratch/.coverage \
                  --entrypoint="/neurodocker/startup.sh" \
                  adamkimbler/funcworks:latest \
                  coverage run \
                  --rcfile /src/funcworks/docker/multiproc.coveragerc \
                  $CONDA_PREFIX/bin/funcworks /data/sourcedata /out dataset \
                  -d /data -m /models/model-001_smdl.json -w /scratch \
                  --participant-label 01 02 \
                  --smoothing 4 --smooth-autocorrelations \
                  --use-rapidart --detrend-poly 3 \
                  --despike

        - run:
            name: Combine coverage and submit
            command: |
                pyenv local 3.6.3
                python -m coverage combine \
                  --rcfile /tmp/src/funcworks/docker/multiproc.coveragerc \
                  /tmp/ds003/work/.coverage.* \
                  /tmp/ds003/work_sdlx/.coverage.* \
                  /tmp/ds003/work_modules/.coverage*
                sed -i -e 's/.opt.miniconda-latest.envs.neuro.lib.python3.6.site-packages/\/tmp\/src\/funcworks/g' .coverage
                python -m coverage xml
                python -m codecov --file coverage.xml --flags ds003 -e CIRCLE_JOB
        - store_artifacts:
            path: /tmp/ds003
  deploy_master:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/funcworks
    steps:
      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              zcat /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
              docker tag adamkimbler/funcworks adamkimbler/funcworks:master
              docker push adamkimbler/funcworks:master
            fi
workflows:
  version: 2.1
  build_test:
    jobs:
      - build:
          filters:
            branches:
              ignore: /doc\/.*/
            tags:
              only: /.*/
      - cache_test_data:
          filters:
            branches:
              ignore: /doc\/.*/
            tags:
              only: /.*/
      - test_ds003:
          requires:
            - build
            - cache_test_data
          filters:
            tags:
              only: /.*/
      - deploy_master:
          requires:
            - test_ds003
          filters:
            branches:
              only: master
  style_check:
    jobs:
      - style_check
